1. 在 Hibernate 中使用 C3P0 数据库连接池（数据源）：

1）导入 Jar 包：
hibernate-release-5.4.11.Final\lib\optional\c3p0\*

2）加入配置：
hibernate.c3p0.max_size: 数据库连接池的 最大连接数
hibernate.c3p0.min_size: 数据库连接池的 最小连接数
hibernate.c3p0.acquire_increment: 当数据库连接池中的连接耗尽时，同一时刻获取 多少个数据库连接

hibernate.c3p0.timeout: 数据库连接池中的 连接对象 在多长时间没有使用过之后，就应该被销毁

hibernate.c3p0.idle_test_period: 表示连接池 检测线程 多长时间 检测一次 池内的所有连接对象 是否超时，
连接池本身不会把自己从连接池中移除，而是专门有一个 线程 按照一定的 时间间隔 来做这件事。
这个 线程 通过比较连接对象最后一次被使用时间和当前时间的时间差 来和 timeout 作对比，
进而决定是否 销毁这个连接对象。

hibernate.c3p0.max_statements: 缓存 Statement对象 的数量


===========================================================


2. 映射 Java 的时间，日期类型

1） 两个基础知识：

(a) 在Java中，代表时间和日期的类型包括：
java.util.Date 和   java.util.Calendar
此外，在 JDBC API 中还提供了3个扩展了 java.util.Date类的子类：
java.sql.Date
java.sql.Time
java.sql.Timestamp
这三个类分别和标准的SQL类型中的DATE, TIME 和 TIMESTAMP 类型对应。

(b) 在标准 SQL中，DATE类型表示日期，TIME类型表示时间，TIMESTAMP类型表示时间戳，同时包含日期和时间信息。

2）如何进行映射？

(a) 因为 java.util.Date 是 java.sql.Date, java.sql.Time 和 java.sql.Timestamp的父类，
所以 java.util.Date 可以对应标准 SQL 类型中的 DATE, TIME 和 TIMESTAMP

(b) 基于以上(a)，所以在设置持久化类的Date类型时，设置为 java.util.Date 最合适。

(c) 如何把 java.util.Date 映射为 DATE, TIME 和 TIMESTAMP ？
可以通过 property 的 type 属性来进行映射。

<property name="date" type="timestamp">
	<column name="DATE" />
</property>

<property name="date" type="date">
	<column name="DATE" />
</property>

<property name="date" type="time">
	<column name="DATE" />
</property>

其中 timestamp, date, time 既不是 Java 类型，也不是标准 SQL类型，而是 Hibernate 映射类型。






